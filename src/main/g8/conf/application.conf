include "backend.conf"

# An ApplicationLoader that uses Guice to bootstrap the application.
play.application.loader = "uk.gov.hmrc.play.bootstrap.ApplicationLoader"

# Primary entry point for all HTTP requests on Play applications
play.http.requestHandler = "uk.gov.hmrc.play.bootstrap.http.RequestHandler"

# Provides an implementation of AuditConnector. Use `uk.gov.hmrc.play.bootstrap.AuditModule` or create your own.
# An audit connector must be provided.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.AuditModule"

# Provides an implementation of MetricsFilter. Use `uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule` or create your own.
# A metric filter must be provided
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule"

$if(mongodb.truthy)$
# Provides MongoDb connector
play.modules.enabled += "play.modules.reactivemongo.ReactiveMongoHmrcModule"
$endif$

# Provides an implementation and configures all filters required by a Platform frontend microservice.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.MicroserviceModule"
play.http.filters = "$package$.wiring.MicroserviceFilters"

# Json error handler
play.http.errorHandler = "uk.gov.hmrc.play.bootstrap.http.JsonErrorHandler"

appName = "$servicenamehyphen$"
play.http.router = prod.Routes
play.modules.enabled += "MicroserviceModule"

controllers {

  $package$.controllers.$servicenamecamel$Controller {
    needsAuditing = true
    needsLogging = true
  }
}

microservice {
  metrics {
    graphite {
      host = localhost
      port = 2003
      prefix = play.\${appName}.
      enabled = false
      legacy = false
    }
  }

  services {
    auth {
      host = localhost
      port = 8500
    }
    foo {
      someInt = 1000
      someString = "someString"
      someBoolean = true
    }
  }
}

metrics {
  name = \${appName}
  rateUnit = SECONDS
  durationUnit = SECONDS
  showSamples = true
  jvm = true
  enabled = true
}

auditing {
  enabled = true
  traceRequests = true
  consumer {
    baseUri {
      host = localhost
      port = 8100
    }
  }
}

controllers {
  com.kenshoo.play.metrics.MetricsController = {
    needsAuth = false
    needsLogging = false
    needsAuditing = false
  }

  confidenceLevel = 50
}

$if(mongodb.truthy)$
mongodb {
  uri = "mongodb://localhost:27017/$servicenamehyphen$"

  failoverStrategy {
    initialDelayMsecs = 100
    retries = 10
    delay {
      factor = 1.25
      function = fibonacci
    }
  }
}

mongo-async-driver {
  akka {
    log-dead-letters = 0
    log-dead-letters-during-shutdown = off
    loglevel = "WARNING"
  }
}
$endif$